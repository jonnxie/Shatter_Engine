#version 450

#define WORK_GROUP_SIZE 128

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants
/*
粒子数量
*/
#define NUM_PARTICLES 1000

#define PI_FLOAT 3.1415927410125732421875f
/*
粒子半径
*/
#define PARTICLE_RADIUS 0.05f
/*
静止密度
*/
#define PARTICLE_RESTING_DENSITY 1000
// Mass = Density * Volume
/*
空气阻力系数
*/
#define AIR_RESISTANCE 0

/*
空气浮力系数
*/
#define AIR_FLOATATION_CORRECTION 1

/*
涡旋系数
*/
#define EDDY_COEFFICIENT 1

/*
扩散力系数
*/
#define DIFFUSIVITY_COEFFICIENT 100

/*
室温
*/
#define INDOOR_TEMPERATURE 37
/*
粒子质量
*/
#define PARTICLE_MASS 0.02
#define SMOOTHING_LENGTH (8 * PARTICLE_RADIUS)
/*
粒子黏度
*/
#define PARTICLE_VISCOSITY 3000.f

// OpenGL y-axis is pointing up, while Vulkan y-axis is pointing down.
// So in OpenGL this is negative, but in Vulkan this is positive.
/*
重力
*/
#define GRAVITY_FORCE vec3(0, 0, -9806.65)

layout(std430, binding = 0) buffer position_block
{
    vec3 position[];
};

layout(std430, binding = 1) buffer velocity_block
{
    vec3 velocity[];
};

layout(std430, binding = 2) buffer force_block
{
    vec3 force[];
};

layout(std430, binding = 3) buffer density_block
{
    float density[];
};

layout(std430, binding = 4) buffer temperature_block
{
    float temperature[];
};

void main()
{
    uint i = gl_GlobalInvocationID.x;  
    // compute all forces
    /*
    扩散力
    */
    vec3 diffuse_force = vec3(0, 0, 0);

    for (uint j = 0; j < NUM_PARTICLES; j++)
    {
        if (i == j)
        {
            continue;
        }
        vec3 delta = position[i] - position[j];
        float r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            diffuse_force += DIFFUSIVITY_COEFFICIENT * PARTICLE_MASS * /* poly6 kernel */ 315.f
            * (1 / density[i] + 1 / density[j]) * pow(SMOOTHING_LENGTH * SMOOTHING_LENGTH - r * r, 3) /
            (64.f * PI_FLOAT * pow(SMOOTHING_LENGTH, 9)) * normalize(delta);
        }
    }
    //viscosity_force *= PARTICLE_VISCOSITY;
    /*
    重力
    */
    vec3 gravity_force = density[i] * GRAVITY_FORCE;

    /*
    空气阻力
    */
    vec3 air_force = - velocity[i] * AIR_RESISTANCE;

    /*
    浮力
    */
    vec3 buoyancy = AIR_FLOATATION_CORRECTION * (temperature[i] - INDOOR_TEMPERATURE) * vec3( 0, 0, 1);

    /*
    涡旋力
    */

    force[i] =  diffuse_force + gravity_force + air_force + buoyancy;
}
